plugins {
	id 'application'
	id 'java'
	id 'jacoco'
	id 'org.springframework.boot' version '3.2.5'
	id 'io.spring.dependency-management' version '1.1.7'
}

group = 'dev.mmartins'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(21)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-mongodb'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.3.0'

	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'

	testImplementation 'org.junit.platform:junit-platform-suite'
	testImplementation 'io.cucumber:cucumber-java:7.22.0'
	testImplementation 'io.cucumber:cucumber-spring:7.22.0'
	testImplementation 'io.cucumber:cucumber-junit-platform-engine:7.22.0'

	testImplementation 'org.springframework.boot:spring-boot-testcontainers'
	testImplementation "org.testcontainers:mongodb:1.19.7"
	testImplementation "org.testcontainers:junit-jupiter:1.19.7"

	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

tasks.named('test') {
	useJUnitPlatform()
	testLogging {
		events "passed", "failed"
		showStandardStreams = true
	}
}

test {
	finalizedBy jacocoTestReport
}

jacocoTestReport {
	dependsOn test
	reports {
		xml.required = false
		csv.required = true

		html.outputLocation = layout.buildDirectory.dir('jacocoHtml')
	}
	afterEvaluate {
		classDirectories.setFrom(files(classDirectories.files.collect {
			fileTree(dir: it, exclude: [
					'**/wishlistapi/*WishlistApiApplication*',
					'**/wishlistapi/entrypoint/*exception*/',
					'**/wishlistapi/application/*exception*/',
			])
		}))
	}
}

springBoot {
	buildInfo()
}